//
//  AppDelegate.swift
//  TravelSample
//
//  Created by Priya Rajagopal on 5/30/17.
//  Copyright Â© 2017 Couchbase Inc. All rights reserved.
//

import UIKit
import CouchbaseLiteSwift

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {

    var window: UIWindow?
    var replicator: Replicator?
    fileprivate var loginViewController:LoginViewController?
    fileprivate var timelineViewController:UINavigationController?
    
    fileprivate var cbMgr = DatabaseManager.shared
    fileprivate var isObservingForLoginEvents:Bool = false
    

    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {
        // Override point for customization after application launch.
        let database: Database
        do {
            database = try Database(name: "cards")
        } catch {
            fatalError("Error opening database")
        }
        
//        // Create a new document (i.e. a record) in the database.
//        let mutableDoc = MutableDocument()
//            .setFloat(2.0, forKey: "version")
//            .setString("SDK", forKey: "type")
//
//        // Save it to the database.
//        do {
//            try database.saveDocument(mutableDoc)
//        } catch {
//            fatalError("Error saving document")
//        }
        
//        // Update a document.
//        if let mutableDoc = database.document(withID: mutableDoc.id)?.toMutable() {
//            mutableDoc.setString("Swift", forKey: "language")
//            do {
//                try database.saveDocument(mutableDoc)
//
//                let document = database.document(withID: mutableDoc.id)!
//                // Log the document ID (generated by the database)
//                // and properties
//                print("Document ID :: \(document.id)")
//                print("Learning \(document.string(forKey: "language")!)")
//            } catch {
//                fatalError("Error updating document")
//            }
//        }
        
        // Create a query to fetch documents of type SDK.
        let query = QueryBuilder
            .select(SelectResult.all())
            .from(DataSource.database(database))
        
        // Run the query.
        do {
            for result in try query.execute() {
                print(result.dictionary(forKey: "cards")?.string(forKey: "username"))
                dump(result)
            }
        } catch {
            fatalError("Error running the query")
        }
        
        
        
        // Create replicators to push and pull changes to and from the cloud.
        let targetEndpoint = URLEndpoint(url: URL(string: "ws://34.246.168.50:4984/cards")!)
        let replConfig = ReplicatorConfiguration(database: database, target: targetEndpoint)
        replConfig.continuous = true
        replConfig.replicatorType = .pushAndPull
        
        // Add authentication.
        replConfig.authenticator = BasicAuthenticator(username: "admin", password: "password")
        
        // Create replicator.
        
        replicator = Replicator(config: replConfig)
        
        // Listen to replicator change events.
        replicator!.addChangeListener { (change) in
            if let error = change.status.error as NSError? {
                print("Error code :: \(error.code)")
            }
        }
        
        // Start replication.
        replicator!.start()
        database.addChangeListener { (change) in
            print(change.documentIDs)
            for docID in change.documentIDs {
                let query = QueryBuilder
                    .select(SelectResult.all())
                    .from(DataSource.database(database))
                    .where(Expression.property("_id").equalTo(Expression.string(docID)))
                
                query.ad
                do {
                    for result in try query.execute() {
                        print(result.dictionary(forKey: "cards")?.toDictionary() ?? "")
                    }
                } catch {
                    fatalError("Error running the query")
                }
            }
        }
        return true
    }

    func applicationWillResignActive(_ application: UIApplication) {
        // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
        // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.
    }

    func applicationDidEnterBackground(_ application: UIApplication) {
        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
    }

    func applicationWillEnterForeground(_ application: UIApplication) {
        // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.
    }

    func applicationDidBecomeActive(_ application: UIApplication) {
        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
    }

    func applicationWillTerminate(_ application: UIApplication) {
        // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
    }

}
